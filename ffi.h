/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_DART-FFI__
#define __RUST_DART-FFI__

#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

void free_u8_32 (
    uint8_t * data);

uint8_t const * rand_u8_32 (void);

typedef struct Ed25519Keypair Ed25519Keypair_t;

Ed25519Keypair_t * ed25519_from_seed (
    uint8_t const * data);

/** \brief
 *  [`Box`][`rust::Box`]`<[T]>` (fat pointer to a slice),
 *  but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct {

    uint8_t * ptr;

    size_t len;

} slice_boxed_uint8_t;

slice_boxed_uint8_t ed25519_sign (
    Ed25519Keypair_t * keypair,
    uint8_t const * data,
    size_t len);

uint8_t const * blake3_hash (
    uint8_t const * data,
    size_t len);

typedef struct Blake3Hasher Blake3Hasher_t;

Blake3Hasher_t * blake3_hasher_new (void);

void blake3_hasher_update (
    Blake3Hasher_t * hasher,
    uint8_t const * data,
    size_t len);

uint8_t const * blake3_hasher_end (
    Blake3Hasher_t * hasher);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_DART-FFI__ */
